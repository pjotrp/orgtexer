#! /usr/bin/env ruby

rootpath = File.dirname(File.dirname(__FILE__))
$: << rootpath+'/lib' << rootpath + '/contrib/rbib/lib'

require 'optparse'
require 'ostruct'
require 'orgtexer'
require 'bibtex'
require 'bibtex/bibformatters'

Encoding.default_external = Encoding::UTF_8

ORGTEXER_VERSION = File.dirname(File.dirname(__FILE__))+'/VERSION'
ORGTEXER_SHOW = 'BibTexOrg '+File.new(ORGTEXER_VERSION).read+' by Pjotr Prins (c) 2017,2018'

style = { format: :springer}

options = OpenStruct.new()
opts1 = OptionParser.new() { |opts|
  opts.on_tail("-h", "--help", "Show help and examples") {
    print(opts)
    print <<EXAMPLE

Examples:

For a full description see https://github.com/pjotrp/orgtexer

EXAMPLE

    exit()
  }

  opts.on("-q", "--quiet", "Run quietly") do |q|
    options.quiet = q
  end

  opts.on("--final", "Final output (no DOI)") do |t|
    style[:final] = true
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options.verbose = v
  end

  opts.on("-t", "--[no-]trace", "Debug") do |t|
    options.trace = t
  end

}
opts = opts1
opts.parse!(ARGV)

$stderr.print ORGTEXER_SHOW,"\n" if not options.quiet

include ORGTeXer

$stderr.print Encoding.default_external

biblist = {}
lines = []

ARGV.each do | fn |
  if fn =~ /.bib$/
    Bibtex::Parser.parse(fn).map do |entry|
      biblist[entry.key] = entry
    end
    next
  end
  File.open(fn,"r:utf-8",&:read).each_line do | s |
    lines << s;
    # p s
  end
end

class HTMLwriter
  def bold s
    "<b>"+s+"</b"
  end
end

citations = {}
refnum = 1

lines.each do |line|
  if line =~ /^\#\+REFERENCES/
    # ---- Inject the references into the text
    # print "<h1>REFERENCES</h1>\n"
    writer = HTMLwriter.new
    bibformatter = BibFormatter::get_formatter(writer,style)
    citations.each do | ref, rec |
      refnum = [:refnum]
      if !biblist[ref]
        $stderr.print "No reference found for #{ref}!"
      else
        bib = biblist[ref]
        text = bibformatter.write(bib)
        marker = bibformatter.reference_marker(ref)
        print "\n<span title=\"#{marker}\"><b><a name=\"[#{rec[:refnum]}]\">[#{rec[:refnum]}]</name></b></span> #{text}<br />\n"
      end
    end
    next
  end
  nline = line
  count = 0
  while nline =~ /\\cite\{([^}]+)\}/
    tags = $1
    $stderr.print "Found citations: ",tags,"\n"

    result = tags.split(/[,\s]+/).map { |tag|
      if !citations[tag]
        citations[tag] = { refnum: refnum, count: 1 }
        refnum += 1
        refnum-1
      else
        citations[tag][:count] += 1
        citations[tag][:refnum]
      end
    }
    repl = "\\cite{"+tags+"}"
    nline.sub!(repl,"<span title=\"#{tags}\"><b><a href=\"##{result}\">[#{result.join(',')}]</a></b></span>")

    count += 1
    break if count>100 # prevent endless loops if non-resolved
  end
  print nline
end

$stderr.p citations if options.debug
